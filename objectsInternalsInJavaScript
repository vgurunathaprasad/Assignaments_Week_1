Objects Internals in Javascript
-------------------------------


Let's assume a JS Object Containing two properties "a" and "b"


Most objects contain all their properties in a single block of memory ("a", and "b"). All blocks of memory have a pointer to a map, which describes their structure. Named properties that don’t fit in an object are usually stored in an overflow array.

Numbered properties are stored separately, usually in a contiguous array.

The JavaScript standard allows developers to define objects in a very flexible way, and it is hard to come up with an efficient representation that works for everything. An object is essentially a collection of properties are  basically key-value pairs. Because of that you can access properties using two different kinds of expressions

>> obj.prop
>> obj[“prop”]

producing the same result

According to the spec, property names are always strings. If you use a name which is not a string, it is implicitly converted to a string. This may be a little surprising: if you use a number as a property name, it gets converted to a string as well. Because of this, you can store values at negative or fractional array indices. So a JavaScript object is basically a map from strings to values.